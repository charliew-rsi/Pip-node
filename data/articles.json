[{"url":"https://stackoverflow.com/questions/29280445/reactjs-setstate-with-a-dynamic-key-name","title":"Reactjs setState() with a dynamic key name?","summary":"Redundant code is often the enemy when create large-scale applications. It leaves rooms for additional bugs and requires additional maintenance be done when even just small changes are made. A common need in ReactJS is to run the setState command when updating fields in a form. Does every field need its own function to handle its own setState? What if the number of fields available is dynamic, perhaps even allowing infinitely new fields to be added? \nThis Stack Overflow articles gives the user a quick explanation on using dynamic key names with setState, allowing a single function to be re-used by many different fields for a very basic, reusable function.","tags":["React"]},{"url":"https://stackoverflow.com/questions/5767325/how-do-i-remove-a-particular-element-from-an-array-in-javascript","title":"How do I remove a particular element from an array in JavaScript?","summary":"JavaScript provides a great many methods for handling array manipulation. Picking the right one will keep a developer's code concise, readable, and efficient which comes in extra handy as data sets approach a cumbersome size. splice() is a great example of such a method. In instances where the index of an element in an array is available, splice() will jump straight to the index and remove the number of elements starting from that spot that are indicated. ","tags":["Vanilla Javascript"]},{"url":"https://stackoverflow.com/questions/5767325/how-do-i-remove-a-particular-element-from-an-array-in-javascript","title":"How do I remove a particular element from an array in JavaScript?","summary":"JavaScript provides a great many methods for handling array manipulation. Picking the right one will keep a developer's code concise, readable, and efficient which comes in extra handy as data sets approach a cumbersome size. splice() is a great example of such a method. In instances where the index of an element in an array is available, splice() will jump straight to the index and remove the number of elements starting from that spot that are indicated. ","tags":["Vanilla Javascript"]},{"url":"https://stackoverflow.com/questions/28880279/react-js-explanation-of-this-props-items-map-feature","title":"React JS: Explanation of this.props.items.map feature","summary":"This article provides additional explanation of React's .map feature. While this article does indicate how to properly use the .map()'s built-in iterator and explains a little bit of the inner workings of the method, this author would recommend a a more thorough document if looking to understand some of the more nuanced features of .map().","tags":["React"]},{"url":"https://stackoverflow.com/questions/28880279/react-js-explanation-of-this-props-items-map-feature","title":"React JS: Explanation of this.props.items.map feature","summary":"This article provides additional explanation of React's .map feature. While this article does indicate how to properly use the .map()'s built-in iterator and explains a little bit of the inner workings of the method, this author would recommend a a more thorough document if looking to understand some of the more nuanced features of .map().","tags":["React"]},{"url":"https://medium.com/@lucavgobbi/using-react-with-typescript-on-visual-studio-39cd0a77fdd2","title":"Using React with TypeScript on Visual Studio","summary":"Typescript is a language produced by Microsoft that transpiles into JavaScript. When TypeScript was first released it received a mixed bag of reviews from JavaScript developers themselves. Some applauded the look and feel of writing in the language - TypeScript encourages strictly typed code and, while causing more overhead, provides more advanced debugging tools and generally makes Javascript feels more like the C-type languages and other similar languages. \nThose that might be considered a bit more of a JavaScript purist did not receive TypeScript with quite the same fanfare. JavaScript in recent years has come more into its own and rejects many conventions of the C-type languages, often freeing the developer up to innovate more original design patterns. For these developers, the need to include TypeScript in their projects was clearly unneeded overhead.\nWhen this author was questioned by a peer whether TypeScript was an option with React, it behooved this author to research a more educated opinion on the subject. This article explains the in-depth process of getting TypeScript properly configured in a React project. This is far from forgiving process and should not be considered lightly as an afterthought, and one should be very mindful about the dependencies running in their build. In spite of these drawbacks, one can confidently say that it is possible, though one should really question what they are hoping to gain from TypeScript before moving forward such an install. This article is a must-read before attempting this configuration oneself.","tags":["React","TypeScript"]},{"url":"https://medium.com/@lucavgobbi/using-react-with-typescript-on-visual-studio-39cd0a77fdd2","title":"Using React with TypeScript on Visual Studio","summary":"Typescript is a language produced by Microsoft that transpiles into JavaScript. When TypeScript was first released it received a mixed bag of reviews from JavaScript developers themselves. Some applauded the look and feel of writing in the language - TypeScript encourages strictly typed code and, while causing more overhead, provides more advanced debugging tools and generally makes Javascript feels more like the C-type languages and other similar languages. \nThose that might be considered a bit more of a JavaScript purist did not receive TypeScript with quite the same fanfare. JavaScript in recent years has come more into its own and rejects many conventions of the C-type languages, often freeing the developer up to innovate more original design patterns. For these developers, the need to include TypeScript in their projects was clearly unneeded overhead.\nWhen this author was questioned by a peer whether TypeScript was an option with React, it behooved this author to research a more educated opinion on the subject. This article explains the in-depth process of getting TypeScript properly configured in a React project. This is far from forgiving process and should not be considered lightly as an afterthought, and one should be very mindful about the dependencies running in their build. In spite of these drawbacks, one can confidently say that it is possible, though one should really question what they are hoping to gain from TypeScript before moving forward such an install. This article is a must-read before attempting this configuration oneself.","tags":["React","TypeScript"]}]